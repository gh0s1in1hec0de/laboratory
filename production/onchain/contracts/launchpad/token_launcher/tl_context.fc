{-
    Contract state represented in global variables for boilerplate reduce and code conciseness.
    `const` keywoard mean that variable represents value, that is being set only once
    in moment of initialization.

    Glossary:
    - `jet` means jetton
    - `util_jet` means utility platform jetton, needed for whitelist functionality
    - `fut_jet` means jetton, that will be deployed in case of sale success
-}

;; === STORAGE ===
global int   this::const::is_initialized?;
global int   this::operational_needs;
global slice this::const::chief_address;
global slice this::const::creator_address;

global int   config::const::fut_jet_total_supply;
global int   config::const::min_ton_for_sale_success;
global int   config::const::fut_jet_dex_amount;
global int   config::const::fut_jet_platform_amount;
global int   config::const::reward_util_jets_total_amount;

;; === SALE STATE ===
global int   general_state::const::start_time;
global int   general_state::fut_jet_inner_balance;
global int   general_state::reward_util_jets_balance;
global int   general_state::fut_jet_deployed_balance;
global int   general_state::total_tons_collected;

global int   creator_round::const::fut_jet_limit;
;; Amount of tokens, that creator bought back
global int   creator_round::creator_fut_jet_balance;
global int   creator_round::const::fut_jet_price;
global int   creator_round::const::end_time;

;; Amount of jettons, that can be sold through WL round
global int   wl_round::const::fut_jet_limit;
;; Maximum of TONs, that can be invested through WL round
global int   wl_round::const::ton_limit;
;; Minimum amount of tokens, that should be received by contract to provide WL pass
global int   wl_round::const::pass_util_jet_amount;
;; Amount of tokens, that must be burned for WL pass. It is being burned only the first time.
global int   wl_round::const::burn_util_jet_amount;
;; Total amount of TONs, invested in WL round. Later used for price determination.
global int   wl_round::ton_invested_total;
global int   wl_round::const::end_time;

;; Amount of jettons, that can be sold through public round
global int   public_round::const::fut_jet_limit;
global int   public_round::fut_jet_sold;
;; Synthetic reserves used to start dinamic determiantion of public round price
;; from the point we we want it to start - last WL pirce?
;; public_synthetic_jet_reserve should be equaled to wl_jet_limit in moment of initialization.
;; Then is starts to change only in public phase
global int   public_round::synthetic_jet_reserve;
;; Equals to `wl_ton_invested_total` until public phase
global int   public_round::synthetic_ton_reserve;
global int   public_round::const::end_time;

;; === TOOLS ===
;; An address of our utility jetton wallet smart contract.
;; We store it to avoid its calculation every time, it's nice decision to compress data we store and reduce fees.
global slice tools::const::util_jet_wallet_address;
global slice tools::const::fut_jet_wallet_address;
global slice tools::const::fut_jet_master_address;
;; Future jetton metadata, formatted due to TEP-74
global cell  tools::const::metadata;
;; Data for jetton deployment in case of successful sale
global cell  tools::const::fut_jet_master_code;
global cell  tools::const::wallet_code;
global cell  tools::const::user_vault_code;
