#include "../../stdlib.fc";
#include "../../workchain.fc";

#include "../gas.fc";
#include "../utils.fc";
#include "../op-codes.fc";

#include "tl_context.fc";

() handle_owner_buyout(int query_id, int msg_value) impure inline {
    throw_unless(error::wrong_time, now() < creator_round::const::end_time);
    int val_left = check_amount_is_enough_for_creator_buyout(msg_value);
    (int jettons_amount, int remainder) = divmod(val_left, creator_round::const::fut_jet_price);

    if (jettons_amount > 0) {
        throw_if(error::balance_overlimit, creator_round::creator_fut_jet_balance + jettons_amount > creator_round::const::fut_jet_limit);
        sale::total_tons_collected += val_left;
        creator_round::creator_fut_jet_balance += jettons_amount;
        this::fut_jet_cur_balance -= jettons_amount;
    }
    ;; Seems like it will fail almost always, and the remainder will be to small, do we actually need it?
    if (remainder > 0) {
        cell msg = begin_cell()
            .store_msg_flags_and_address_none(NON_BOUNCEABLE)
            .store_slice(this::const::creator_address)
            .store_coins(remainder)
            .store_prefix_only_body()
            .store_op(op::excesses)
            .store_query_id(query_id)
            .end_cell();
        send_raw_message(msg, SEND_MODE_IGNORE_ERRORS);
    }
}

() handle_wl_purchase(int query_id, int attached_value, slice sender_address, slice initiator) impure inline {
    throw_if(error::wrong_time, now() < creator_round::const::end_time | now() > wl_round::const::end_time);
    int user_value_after_fee = check_amount_is_enough_for_wl_purchase(attached_value);

    if (user_value_after_fee <= 0 | wl_round::ton_invested_total + user_value_after_fee <= wl_round::const::ton_limit) {
        cell chargeback_transfer_msg = build_jetton_transfer_msg(
            query_id,
            0,
            wl_round::const::pass_util_jet_amount,
            jet_tools::const::util_jet_wallet_address,
            initiator,
            user_value_after_fee > 0 ? user_value_after_fee : 1,
            begin_cell().store_uint(0, 1)

        );
        ;; Taking all the value remains from transfer notification to attach
        send_raw_message(chargeback_transfer_msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        return ();
    }
    ;; Send back all the jettons except burn amount
    ;; If bounced - tokens stays on our balance
    cell return_transfer_msg = build_jetton_transfer_msg(
        query_id,
        0,
        wl_round::const::pass_util_jet_amount - wl_round::const::burn_util_jet_amount,
        jet_tools::const::util_jet_wallet_address,
        initiator,
        0,
        begin_cell().store_uint(0, 1)
    );
    send_raw_message(return_transfer_msg, 0);

    ;; We attach value only for routong messages
    int value = get_wl_purchase_gas_consumption() - get_compute_fee(MY_WORKCHAIN, WL_PURCHASE_GAS_CONSUMPTION);
    cell msg = build_balance_update_message(
        query_id,
        value,
        sender_address,
        BALANCE_UPD_DEPOSIT_WL,
        user_value_after_fee,
        0
    );

    send_raw_message(msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL);
    wl_round::ton_invested_total += user_value_after_fee;
    sale::total_tons_collected += user_value_after_fee;
    {-
       As out WL phase is fairlaunch - we have static amount of jettons to distribute
       and dynamic value of TON, that can be invested in this round (due to our guarantees to WL investors).
       So, we need to start public sale price from last WL price, than we need to be aware about
       WL round stats changes every time. Then synthetic reserves will continue to change in public round and
       this is the reason, why we don't use `ton_invested_total` for that purposes.
    -}
    public_round::synthetic_ton_reserve += user_value_after_fee;
}

() handle_public_purchase(int query_id, int attached_value, slice sender_address) impure inline {
    throw_if(error::wrong_time, now() < wl_round::const::end_time | now() >= public_round::const::end_time);
    ;; `user_value_after_fee` is always more than 0
    int user_value_after_fee = check_amount_is_enough_for_public_purchase(attached_value);
    int res_jettons = get_amount_out(user_value_after_fee, public_round::synthetic_ton_reserve, public_round::synthetic_jet_reserve);

    throw_unless(error::unreachable, res_jettons >= 0);
    throw_unless(error::balance_overlimit, public_round::const::fut_jet_limit >= public_round::fut_jet_sold + res_jettons);
    throw_unless(error::balance_overlimit, this::fut_jet_cur_balance - wl_round::const::fut_jet_limit - res_jettons >= 0);

    ;; Taking care of our synthetic price controllers
    public_round::synthetic_ton_reserve += attached_value;
    public_round::synthetic_jet_reserve -= res_jettons;

    this::fut_jet_cur_balance -= res_jettons;
    public_round::fut_jet_sold += res_jettons;

    sale::total_tons_collected += user_value_after_fee;

    ;; Here we attach precise amount of money - as all the remainings gone on ivenstment
    int msg_value = get_balance_update_gas_cost();
    cell msg = build_balance_update_message(
        query_id,
        msg_value,
        sender_address,
        BALANCE_UPD_DEPOSIT_PUB,
        user_value_after_fee,
        res_jettons
    );
    send_raw_message(msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() handle_refund_request(int query_id, int attached_value, slice sender_address, int mode, int refund_value) impure inline {
    ;; If jetton is deployed - than pool is already created and there is no refund option
    throw_if(error::wrong_time, sale::const::fut_jet_deployed_balance > 0);
    throw_if(error::wrong_time, now() < creator_round::const::end_time);
    throw_unless(error::bad_request, mode == 3 | mode == 4 | mode == 5);
    ;; We don't actually care about leftovers
    int _user_value_after_fee = check_amount_is_enough_for_refund(attached_value);

    cell msg = build_balance_update_message(
        query_id,
        0, ;; Should be rewritten by message sending mode
        sender_address,
        mode,
        refund_value,
        0
    );
    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() handle_refund_confirmation(int query_id, int attached_value, slice sender_address, int wl_tons, int pub_tons, int jettons_to_charge_back, slice recipient) impure inline {
    verify_user_vault(sender_address, recipient);
    int tons_to_refund = wl_tons + pub_tons;

    if (wl_tons > 0) {
        wl_round::ton_invested_total -= wl_tons;
        ;; If it is still WhiteList round
        if (now() < wl_round::const::end_time) {
            public_round::synthetic_ton_reserve -= wl_tons;
        }
    }

    ;; Return jettons, owned by users
    this::fut_jet_cur_balance += jettons_to_charge_back;
    sale::total_tons_collected -= tons_to_refund;

    cell simple_transfer_message = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(recipient)
        .store_coins(tons_to_refund)
        .store_prefix_only_body()
        .store_op(0)
        .store_query_id(query_id)
        .end_cell();
    send_raw_message(simple_transfer_message, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() handle_wl_callback(int query_id, int _attached_value, slice sender_address, int should_burn?, int initiator) impure inline {
    verify_user_vault(sender_address, initiator);
    cell msg = should_burn?
    ? build_jetton_burn_msg(query_id, wl_round::const::burn_util_jet_amount, jet_tools::const::util_jet_wallet_address) ;; 1 nanoton to notify user about tokens
    : build_jetton_transfer_msg(query_id, 0, wl_round::const::burn_util_jet_amount, jet_tools::const::util_jet_wallet_address, initiator, 1, begin_cell().store_uint(0, 1));

    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() handle_jetton_claim_request(int query_id, int attached_value, slice sender_address) impure inline {
    ;; Don't need stateinit as if user vault doesn't exist - there is nothing to claim
    (cell _user_vault_stateinit, slice user_vault_address) = calculate_user_vault_data(sender_address);
    ;; We don't care about extra value as final operation (claimed jetton transfer) will take care about excesses
    int _remainings = check_amount_is_enough_for_jetton_claim(attached_value);
    cell msg_body = begin_cell()
        .store_op(op::uv::claim)
        .store_query_id(query_id)
        .end_cell();
    cell msg = begin_cell()
        ;; Figure out about fee chargeback in case of bounce
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(user_vault_address)
        .store_coins(get_claim_gas_cost())
        .store_only_body_ref(msg_body)
        .end_cell();
    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() handle_jetton_claim_confirmation(int query_id, int _attached_value, slice sender_address, int wl_tons, int jettons_to_send, slice recipient) impure inline {
    verify_user_vault(sender_address, recipient);
    int total_fut_jet_recipient_amount = jettons_to_send;

    if (wl_tons > 0) {
        int public_remainings = public_round::const::fut_jet_limit - public_round::fut_jet_sold;
        int wl_round_fut_jet_final_amount = wl_round::const::fut_jet_limit + public_remainings;

        int recipient_fur_jet_share = muldiv(wl_round_fut_jet_final_amount, wl_tons, wl_round::ton_invested_total);
        total_fut_jet_recipient_amount += recipient_fur_jet_share;
    }
    if (equal_slices_bits(recipient, this::const::creator_address)) {
        total_fut_jet_recipient_amount += creator_round::creator_fut_jet_balance;
        creator_round::creator_fut_jet_balance = 0;
    }

    int total_amount_destributed_amount_users = wl_round::const::fut_jet_limit + public_round::const::fut_jet_limit;
    int utility_tokens_to_reward_user = muldiv(
        this::const::reward_util_jets_total_amount,
        total_fut_jet_recipient_amount,
        total_amount_destributed_amount_users
    );
    throw_if(
        error::balance_lack,
        this::reward_util_jets_cur_balance < utility_tokens_to_reward_user
        | sale::const::fut_jet_deployed_balance < total_fut_jet_recipient_amount
    );

    this::reward_util_jets_cur_balance -= utility_tokens_to_reward_user;
    cell util_jet_reward_msg = build_jetton_transfer_msg(
        query_id,
        JETTON_MIN_TRANSFER_FEE,
        utility_tokens_to_reward_user,
        jet_tools::const::util_jet_wallet_address,
        recipient,
        1,
        begin_cell().store_uint(0, 1)
    );

    sale::const::fut_jet_deployed_balance -= total_fut_jet_recipient_amount;
    cell msg_body = begin_cell()
        .store_op(op::transfer)
        .store_query_id(query_id)
        .store_coins(total_fut_jet_recipient_amount)
        .store_slice(recipient) ;; To
        .store_slice(recipient) ;; Address, that will get excesses after operation
        .store_coins(1)
        .store_int(0, 1) ;; Either forward payload to avoid TVM exit code 9
        .end_cell();
    cell fut_jet_claim_msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE) ;; TODO Handle in on-bounce in the future
        .store_slice(sale::const::fut_jet_wallet_address)
        .store_coins(0) ;; Will be rewritten by sending mode
        .store_only_body_ref(msg_body)
        .end_cell();

    send_raw_message(util_jet_reward_msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL);
    send_raw_message(fut_jet_claim_msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL | SEND_MODE_CARRY_ALL_BALANCE);
}