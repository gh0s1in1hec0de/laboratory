#include "../../stdlib.fc";
#include "../op-codes.fc";
#include "../utils.fc";

#include "core_context.fc";
#include "core_storage.fc";
#include "operations.fc";

() recv_internal(int contract_balance, int attached_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?() | in_msg_body.slice_bits() < 32) {
        ;; Logic for simple transfers
        return ();
    }
    (int msg_flags, slice sender_address, int attached_value, int fwd_fee_from_in_msg) = extract_full_msg_data(in_msg_full);
    (int op, int query_id) = in_msg_body~load_op_and_query_id();

    load_data(); ;; Now we have our contract data available in globals

    ;; Will be computed just once - effecinency increase
    if (this::util_jetton_wallet_address.is_address_none()) {
        this::util_jetton_wallet_address = calculate_user_jetton_wallet_address(
            my_address(),
            this::util_jetton_master_address,
            code::jetton_wallet
        );
    }
    if (msg_flags & 1) {
        ;; Is bounced
        return ();
    }

    if (op == op::core::init) {
        ;; Add some storage and values constraints later
        return ();
    }
    if (op == op::core::create_launch) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE | RESERVE_BOUNCE_ON_ACTION_FAIL);
        throw_unless(error::not_enough_gas, attached_value > get_amount_for_token_launch_deploy());
        throw_unless(error::overload, this::not_funded_launches_amount <= 20);
        create_launch(
            query_id,
            sender_address,
            in_msg_body~load_coins(),
            in_msg_body~load_uint(16),
            in_msg_body~load_ref(),
            in_msg_body~load_int(32)
        );
        save_data();
        return ();
    }
    if (op == op::core::tl_init_callback) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE | RESERVE_BOUNCE_ON_ACTION_FAIL);
        init_callback(query_id, attached_value, sender_address);
        save_data();
        return ();
    }
    if (op == op::transfer_notification) {
        handle_incoming_transfer(sender_address, in_msg_body~load_coins());
        save_data();
        return ();
    }

    if (op == op::core::upgrade_config) {
        throw_unless(error::unauthorized_access, equal_slices_bits(sender_address, this::chief));
        load_data();
        launch_conf::min_ton_for_sale_success = in_msg_body~load_coins();
        launch_conf::ton_limit_for_wl_round = in_msg_body~load_coins();
        launch_conf::util_jet_reward_amount = in_msg_body~load_coins();
        launch_conf::util_jet_wl_pass_amount = in_msg_body~load_coins();
        launch_conf::util_jet_burn_per_wl_pass_amount = in_msg_body~load_coins();

        launch_conf::jet_wl_limit_pct = in_msg_body~load_uint(16);
        launch_conf::jet_pub_limit_pct = in_msg_body~load_uint(16);
        launch_conf::jet_dex_share_pct = in_msg_body~load_uint(16);

        launch_conf::creator_round_duration_ms = in_msg_body~load_int(32);
        launch_conf::wl_round_duration_ms = in_msg_body~load_int(32);
        launch_conf::pub_round_duration_ms = in_msg_body~load_int(32);
        launch_conf::claim_duration_ms = in_msg_body~load_int(32);
        save_data();
    }

    if (op == op::upgrade) {
        throw_unless(error::unauthorized_access, equal_slices_bits(sender_address, this::chief));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        in_msg_body.end_parse();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(error::wrong_op);
}

(cell, int, int) get_state() method_id {
    load_data();
    return (
        this::not_funded_launches,
        this::not_funded_launches_amount,
        this::util_jet_cur_balance
    );
}

(int, int, int, int, int, int, int, int, int, int, int) get_launch_config() method_id {
    load_data();
    return (
        launch_conf::min_ton_for_sale_success,
        launch_conf::ton_limit_for_wl_round,
        launch_conf::util_jet_reward_amount,
        launch_conf::util_jet_wl_pass_amount,
        launch_conf::util_jet_burn_per_wl_pass_amount,

        launch_conf::jet_wl_limit_pct,
        launch_conf::jet_pub_limit_pct,
        launch_conf::jet_dex_share_pct,

        launch_conf::creator_round_duration_ms,
        launch_conf::wl_round_duration_ms,
        launch_conf::pub_round_duration_ms
    );
}