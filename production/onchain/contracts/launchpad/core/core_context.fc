;; === GLOBAL ===
global slice this::chief;
global slice this::util_jetton_master_address;
global slice this::util_jetton_wallet_address;
global int   this::util_jet_cur_balance;
;; As we need to store addresses of launches, that will ask us for funding (we have some dynamic settings in state)
;; We have a dicitonary with values, that will store not funded launches
global cell  this::not_funded_launches;
global int   this::not_funded_launches_amount;

;; === LAUNCH CONFIG ===
;; Values that creators are not responsible for
global int launch_conf::min_ton_for_sale_success;
global int launch_conf::ton_limit_for_wl_round;
;; Amount of util jettons per launch, that should be used as rewards to participants
global int launch_conf::util_jet_reward_amount;
global int launch_conf::util_jet_wl_pass_amount;
global int launch_conf::util_jet_burn_per_wl_pass_amount;
;; As it is impossible to store fractions of percents, than we store percentages as 4-digit integers
;; global int launch_conf::jet_creator_limit_pct;
global int launch_conf::jet_wl_limit_pct;
global int launch_conf::jet_pub_limit_pct;
global int launch_conf::jet_dex_share_pct;

global int launch_conf::creator_round_duration_ms;
global int launch_conf::wl_round_duration_ms;
global int launch_conf::pub_round_duration_ms;
global int launch_conf::claim_duration_ms;

;; === CONTRACTS ===
global cell code::jetton_launch;
global cell code::user_vault;
global cell code::derived_jetton_master;
;; This code will be used in two contracts both - in util jetton and in derived jettons
global cell code::jetton_wallet;

