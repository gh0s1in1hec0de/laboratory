#include "../../stdlib.fc";
#include "../op-codes.fc";
#include "../utils.fc";
#include "../gas.fc";

#include "trades_handler.fc";
#include "tl_context.fc";
#include "tl_storage.fc";

const int MINT_QUERY_ID = 27082006;

() deploy_launch_jetton() impure inline {
    (_, _, _, cell metadata, cell fut_jet_master_code, cell wallet_code, _) = unpack_tools(this::tools);
    (cell jetton_master_stateinit, slice jetton_master_address) = calculate_fut_jet_master_data(
        fut_jet_master_code,
        config::const::fut_jet_total_supply,
        my_address(),
        address_none(),
        wallet_code,
        metadata
    );
    ;; Internal message for jetton master jetton wallet
    cell master_msg = begin_cell()
        .store_op(op::internal_transfer)
        .store_query_id(MINT_QUERY_ID)
        .store_coins(config::const::fut_jet_total_supply)
        .store_slice(my_address()) ;; from
        .store_slice(my_address()) ;; response_address
        .store_coins(1) ;; Forwarding 1 nanoton to get transfer_notification
        .store_int(0, 1) ;; store one-bit zero to avoint exit code 9 by TVM
        .end_cell();
    cell msg_body = begin_cell()
        .store_op(op::mint)
        .store_query_id(MINT_QUERY_ID)
        .store_slice(my_address())
        .store_coins(JETTON_MIN_TRANSFER_FEE)
        .store_ref(master_msg)
        .end_cell();
    cell msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(jetton_master_address)
        .store_coins(get_jetton_deployment_gas_cost())
        .store_statinit_ref_and_body_ref(jetton_master_stateinit, msg_body)
        .end_cell();
    send_raw_message(msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}


() route_incoming_transfer(int query_id, int attached_value, slice sender_address, int jetton_amount, slice initiator, slice maybe_payload) impure inline {
    (slice fut_jet_master_address, slice fut_jet_wallet_address, _, _, _, _) = unpack_tools(this::tools);
    ;; `ifs` oreder defined this way for reasons of efficiency
    ifnot (jetton_amount == config::const::fut_jet_total_supply) {
        return ();
    }
    if (~ equal_slices_bits(sender_address, fut_jet_wallet_address)) {
        ;; It does mean we just got random tokens on equal amount
        return ();
    }
    general_state::fut_jet_deployed_balance =
    config::const::fut_jet_total_supply
    - (config::const::fut_jet_dex_amount + config::const::fut_jet_platform_amount);

    ;; We send one jetton transfer with all the
    cell transfer_msg = build_jetton_transfer_msg(
        query_id,
        JETTON_MIN_TRANSFER_FEE + general_state::total_tons_collected,
        config::const::fut_jet_dex_amount + config::const::fut_jet_platform_amount,
        fut_jet_wallet_address,
        this::const::chief_address,
        general_state::total_tons_collected,
        begin_cell().store_coins(config::const::fut_jet_dex_amount).store_coins(config::const::fut_jet_platform_amount).end_cell()
    );
    cell claim_admin_msg = begin_cell()
        .store_msg_flags_and_address_none(NON_BOUNCEABLE)
        .store_slice(fut_jet_master_address)
        .store_coins(
            get_forward_fee(MY_WORKCHAIN, CLAIM_ADMIN_MSG_BITS, CLAIM_ADMIN_MSG_CELLS)
            + get_compute_fee(MY_WORKCHAIN, CLAIM_ADMIN_GAS_CONSUMPTION)
        )
        .store_prefix_only_body()
        .store_op(op::claim_admin)
        .end_cell();
    send_raw_message(claim_admin_msg, SEND_MODE_REGULAR | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
    send_raw_message(transfer_msg, SEND_MODE_REGULAR | SEND_MODE_BOUNCE_ON_ACTION_FAIL);

}