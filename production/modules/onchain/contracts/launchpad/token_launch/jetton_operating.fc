#include "../../stdlib.fc";
#include "../op-codes.fc";
#include "../utils.fc";
#include "../gas.fc";

#include "trades_handler.fc";
#include "tl_context.fc";
#include "tl_storage.fc";

const int MINT_QUERY_ID = 27082006;

() deploy_launch_jetton() impure inline {
    (_, _, _, cell metadata, cell fut_jet_master_code, cell wallet_code, _) = unpack_tools(this::tools);
    (cell jetton_master_stateinit, slice jetton_master_address) = calculate_fut_jet_master_data(
        fut_jet_master_code,
        config::const::fut_jet_total_supply,
        my_address(),
        address_none(),
        wallet_code,
        metadata
    );
    ;; Internal message for jetton master jetton wallet
    cell master_msg = begin_cell()
        .store_op(op::internal_transfer)
        .store_query_id(MINT_QUERY_ID)
        .store_coins(config::const::fut_jet_total_supply)
        .store_slice(my_address()) ;; from
        .store_slice(my_address()) ;; response_address
        .store_coins(1) ;; Forwarding 1 nanoton to get transfer_notification
        .store_int(0, 1) ;; store one-bit zero to avoint exit code 9 by TVM
        .end_cell();
    cell msg_body = begin_cell()
        .store_op(op::mint)
        .store_query_id(MINT_QUERY_ID)
        .store_slice(my_address())
        .store_coins(JETTON_MIN_TRANSFER_FEE)
        .store_ref(master_msg)
        .end_cell();
    cell msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(jetton_master_address)
        .store_coins(get_jetton_deployment_gas_cost())
        .store_statinit_ref_and_body_ref(jetton_master_stateinit, msg_body)
        .end_cell();
    send_raw_message(msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() route_incoming_transfer(int query_id, int attached_value, slice sender_address, int jetton_amount, slice initiator, slice maybe_payload) impure inline {
    (slice util_jet_wallet_address, slice fut_jet_master_address, slice fut_jet_wallet_address, _, _, _, _) = unpack_tools(this::tools);
    if (equal_slices_bits(sender_address, util_jet_wallet_address)) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE);

        cell forward_payload = maybe_payload~load_maybe_ref();
        ;; TODO replace with better error
        throw_if(error::bad_request, null?(forward_payload));

        slice forward_payload_slice = forward_payload.begin_parse();
        int util_jet_enr_mode = forward_payload_slice~load_uint(UTIL_JET_SEND_MODE_SIZE);
        forward_payload_slice.end_parse();

        if (util_jet_enr_mode == UTIL_JET_REWARD_ENROLLMENT) {
            ;; It does mean, that utility jettons reward amount was already enrolled
            if ((general_state::reward_util_jets_balance != 0) | (config::const::reward_util_jets_total_amount != 0)) {
                cell chargeback_msg = build_jetton_transfer_msg(
                    query_id,
                    0,
                    jetton_amount,
                    util_jet_wallet_address,
                    initiator,
                    1,
                    null()
                );
                send_raw_message(chargeback_msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_IGNORE_ERRORS);
                return ();
            }
            config::const::reward_util_jets_total_amount += jetton_amount;
            general_state::reward_util_jets_balance += jetton_amount;
            this::const::is_initialized? = TRUE;
        }

        if (util_jet_enr_mode == UTIL_JET_WL_PASS) {
            if (jetton_amount < wl_round::const::pass_util_jet_amount) {
                cell chargeback_msg = build_jetton_transfer_msg(
                    query_id,
                    0,
                    jetton_amount,
                    util_jet_wallet_address,
                    initiator,
                    1,
                    null()
                );
                send_raw_message(chargeback_msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_IGNORE_ERRORS);
                return ();
            }
            handle_wl_purchase(query_id, attached_value, sender_address, initiator);
        }
    }
    ;; `ifs` oreder defined this way for reasons of efficiency
    if (jetton_amount == config::const::fut_jet_total_supply) {
        if (~ equal_slices_bits(sender_address, fut_jet_wallet_address)) {
            ;; It does mean we just got random tokens on equal amount
            return ();
        }
        general_state::fut_jet_deployed_balance =
        config::const::fut_jet_total_supply
        - (config::const::fut_jet_dex_amount + config::const::fut_jet_platform_amount);

        ;; We send one jetton transfer with all the
        cell transfer_msg = build_jetton_transfer_msg(
            query_id,
            JETTON_MIN_TRANSFER_FEE + general_state::total_tons_collected,
            config::const::fut_jet_dex_amount + config::const::fut_jet_platform_amount,
            fut_jet_wallet_address,
            this::const::chief_address,
            config::const::min_ton_for_sale_success,
            begin_cell().store_coins(config::const::fut_jet_dex_amount).store_coins(config::const::fut_jet_platform_amount).end_cell()
        );
        cell claim_admin_msg = begin_cell()
            .store_msg_flags_and_address_none(NON_BOUNCEABLE)
            .store_slice(fut_jet_master_address)
            .store_coins(
                get_forward_fee(MY_WORKCHAIN, CLAIM_ADMIN_MSG_BITS, CLAIM_ADMIN_MSG_CELLS)
                + get_compute_fee(MY_WORKCHAIN, CLAIM_ADMIN_GAS_CONSUMPTION)
            )
            .store_prefix_only_body()
            .store_op(op::claim_admin)
            .end_cell();
        send_raw_message(claim_admin_msg, SEND_MODE_REGULAR | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
        send_raw_message(transfer_msg, SEND_MODE_REGULAR | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
    }
}