#include "../../workchain.fc";
#include "../../stdlib.fc";
#include "../op-codes.fc";
#include "../utils.fc";
#include "../gas.fc";

#include "jetton_operating.fc";
#include "trades_handler.fc";
#include "tl_context.fc";
#include "tl_storage.fc";


{-
  TODO are we doing this ton-jetton processing the correct way?
  TODO Seems like we should add nine zeroes in couple of places
-}

() initialize(int query_id, slice sender_address, slice fut_jet_wallet_address, slice util_jet_wallet_address, slice fut_jet_master_address) impure inline {
    (_, _, _, cell metadata, cell fut_jet_master_code, cell wallet_code, cell user_vault_code) = unpack_tools(this::tools);
    ;; Building new tools with initialized addresses instead of none ones
    cell new_tools = begin_cell()
        .store_slice(util_jet_wallet_address)
        .store_slice(fut_jet_master_address)
        .store_slice(fut_jet_wallet_address)
        .store_ref(metadata)
        .store_ref(fut_jet_master_code)
        .store_ref(wallet_code)
        .store_ref(user_vault_code)
        .end_cell();
    this::tools = new_tools;
    cell msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(sender_address)
        .store_coins(0)
        .store_prefix_only_body()
        .store_op(op::core::tl_init_callback)
        .store_query_id(query_id)
        .end_cell();
    ;; Everything except storage fee
    send_raw_message(msg, SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() on_bounce(int op, int query_id, int attached_value, slice sender_address, slice in_msg_body) impure inline {
    if (op == op::uv::balance_update) {
        int mode = in_msg_body~load_uint(4);
        ;; If it is not deposit
        ifnot ((mode == BALANCE_UPD_DEPOSIT_WL) | (mode == BALANCE_UPD_DEPOSIT_PUB)) {
            return ();
        }
        handle_refund_confirmation(
            query_id,
            attached_value,
            sender_address,
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_msg_addr()
        );
    }
}


() recv_internal(int contract_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; Donations are always welcome
    if (in_msg_body.slice_empty?() | in_msg_body.slice_bits() < 32) {
        return ();
    }
    (int msg_flags, slice sender_address, int attached_value, int fwd_fee_from_in_msg) = extract_full_msg_data(in_msg_full);
    (int op, int query_id) = in_msg_body~load_op_and_query_id();

    load_data(); ;; Now we have our contract data available in globals
    if (msg_flags & 1) {
        on_bounce(op, query_id, attached_value, sender_address, in_msg_body);
        return ();
    }

    if (op == op::tl::init) {
        throw_if(error::already_initialized, this::const::is_initialized?);
        raw_reserve(calculate_token_launch_min_storage_fee(2_MONTHS), RESERVE_REGULAR | RESERVE_BOUNCE_ON_ACTION_FAIL);
        initialize(query_id, sender_address, in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr());
        save_data();
        return ();
    }

    {- TODO?
   Rewrite balance - freeze not just contract balance, but add inspection for -
   - One month storage fee - its dummy, but fuck dinamic calc, it is lower bound
   - Total amount of tons, that was locked
   - Fees, that was prepared for token deploy
   -}

    {-
       Crucial point for our contract, as we determine following operations based on it:
       - WL buy (by detecting WL-pass amount of utility jettons)
       - WL tokens initial deposit (happens, when contract is just created and need its own utility jettons reward amount)
       - Minting all the supply of derived token to our balance (after successfull launch, is needed for distributing)
    -}

    if (op == op::transfer_notification) {
        ;; Verify, that sender is our utility token wallet and no one other
        route_incoming_transfer(query_id, attached_value, sender_address, in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body);
        save_data();
        return ();
    }
    if (op == op::excesses) {
        return ();
    }

    ;; Check with new position
    ;; We can't perform any operations before actual start and initialization
    throw_unless(error::wrong_time, now() > general_state::const::start_time);
    throw_unless(error::uninitialized, this::const::is_initialized?);


    if (this::operational_needs > ONE_TON) {
        cell msg = simple_transfer(this::const::chief_address, this::operational_needs, null());
        send_raw_message(msg, SEND_MODE_IGNORE_ERRORS);
    }

    ;; - CN: can be sent by anyone
    ;; if there is a commission balance, returns it back to the user
    if (op == op::tl::creator_buyout) {
        throw_unless(error::unauthorized_access, equal_slices_bits(sender_address, this::const::creator_address));
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE | RESERVE_BOUNCE_ON_ACTION_FAIL);
        handle_creator_buyout(query_id, attached_value);
        save_data();
        return ();
    }

    if (op == op::tl::wl_callback) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE);
        handle_wl_callback(query_id, attached_value, sender_address, in_msg_body~load_bool(), in_msg_body~load_msg_addr());
        ;; Nothing to save as no changes to state were done
        return ();
    }
    if (op == op::tl::public_buy) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE | RESERVE_BOUNCE_ON_ACTION_FAIL);
        handle_public_purchase(query_id, attached_value, sender_address);
        save_data();
        return ();
    }
    if (op == op::tl::refund_request) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE | RESERVE_BOUNCE_ON_ACTION_FAIL);
        handle_refund_request(query_id, attached_value, sender_address, in_msg_body~load_uint(4), in_msg_body~load_coins());
        return ();
    }
    if (op == op::tl::refund_confirmation) {
        handle_refund_confirmation(
            query_id,
            attached_value,
            sender_address,
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_msg_addr()
        );
        save_data();
        return ();
    }

    if (op == op::tl::deploy_jet) {
        throw_unless(error::unauthorized_access, equal_slices_bits(sender_address, this::const::chief_address));
        accept_message();
        ;; 2 checks here - that we have collected enough money for jetton deploy and that contract has money for all the additional spendings
        throw_if(error::balance_lack, general_state::total_tons_collected < config::const::min_ton_for_sale_success);
        int launch_success_treshold =
        general_state::total_tons_collected + this::operational_needs
        + get_compute_fee(MY_WORKCHAIN, DEPLOY_JETTON_GAS_CONSUMPTION)
        + get_jetton_deploy_gas_cost()
        + calculate_token_launch_min_storage_fee(1_MONTH);
        throw_if(error::balance_lack, contract_balance < launch_success_treshold);

        deploy_launch_jetton();
        return ();
    }
    if (op == op::tl::jetton_claim_request) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE | RESERVE_BOUNCE_ON_ACTION_FAIL);
        throw_unless(error::wrong_time, now() > public_round::const::end_time);
        ;; For successful claim we need both launch jetton to send and utility jetton to reward
        throw_if(error::tokens_lack, ~ (general_state::fut_jet_deployed_balance > 0) | ~ (general_state::reward_util_jets_balance > 0));
        handle_jetton_claim_request(query_id, attached_value, sender_address);
        return ();
    }
    if (op == op::tl::jetton_claim_confirmation) {
        raw_reserve(0, RESERVE_WITH_CONTRACT_BALANCE);
        int wl_tons = in_msg_body~load_coins();
        in_msg_body~load_coins(); ;; Skip pub_tons
        int jettons = in_msg_body~load_coins();
        slice recipient = in_msg_body~load_msg_addr();
        handle_jetton_claim_confirmation(query_id, attached_value, sender_address, wl_tons, jettons, recipient);
        save_data();
        return ();
    }
    if (op == op::upgrade) {
        throw_unless(error::unauthorized_access, equal_slices_bits(sender_address, this::const::chief_address));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        in_msg_body.end_parse();
        set_data(new_data);
        set_code(new_code);
        return ();
    }
    throw(error::wrong_op);
}

(int, slice, cell) get_launch_data() method_id {
    load_data();
    (_, _, _, cell metadata, _, _, _) = unpack_tools(this::tools);
    throw_unless(error::uninitialized, this::const::is_initialized?);
    return (config::const::fut_jet_total_supply, this::const::creator_address, build_content_cell(metadata.begin_parse()));
}

slice get_user_vault_address(slice user_address) method_id {
    load_data();
    (_, _, _, _, _, _, cell user_vault_code) = unpack_tools(this::tools);
    (_, slice user_vault_address) = calculate_user_vault_data(user_vault_code, user_address);
    return user_vault_address;
}

(int, int, int, int, int) get_sale_money_flow() method_id {
    load_data();
    return (
        creator_round::creator_fut_jet_balance,
        wl_round::ton_invested_total,
        public_round::fut_jet_sold,
        public_round::synthetic_jet_reserve,
        public_round::synthetic_ton_reserve
    );
}

;; Shouldn't exist as we must read this data from initialization
(int, int, int, int, int) get_sale_timings() method_id {
    load_data();
    return (
        general_state::const::start_time,
        creator_round::const::end_time,
        wl_round::const::end_time,
        public_round::const::end_time,
        general_state::const::end_time
    );
}

(int, int, int, int, int, int) get_config() method_id {
    load_data();
    return (
        wl_round::const::fut_jet_limit,
        public_round::const::fut_jet_limit,
        config::const::fut_jet_dex_amount,
        config::const::fut_jet_platform_amount,
        creator_round::const::fut_jet_limit,
        creator_round::const::fut_jet_price
    );
}