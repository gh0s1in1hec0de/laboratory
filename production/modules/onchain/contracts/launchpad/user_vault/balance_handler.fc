#include "../../stdlib.fc";
#include "../op-codes.fc";
#include "../utils.fc";
#include "../gas.fc";

#include "uv_context.fc";

int get_withdraw_message_mode() impure inline_ref {
    raw_reserve(calculate_user_vault_min_storage_fee(1_MONTH), RESERVE_REGULAR | RESERVE_BOUNCE_ON_ACTION_FAIL);
    return SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_BOUNCE_ON_ACTION_FAIL;
}

cell build_withdraw_confirmation_message(int is_refund?, int query_id, int wl_tons, int pub_tons, int jettons, int refund_mode) inline_ref {
    ;; Build MessageRelaxed, see TL-B layout in stdlib.fc#L733
    ;; 32 + 64 + 16 + 16 + 16 + 267 < 1023
    builder msg_body = begin_cell()
        .store_op(is_refund? ? op::tl::refund_confirmation : op::tl::jetton_claim_confirmation)
        .store_query_id(query_id)
        .store_coins(wl_tons)
        .store_coins(pub_tons)
        .store_coins(jettons)
        .store_slice(this::owner);
    if (is_refund?) {
        msg_body = msg_body.store_uint(refund_mode, BALANCE_UPD_MODE_SIZE);
    }
    cell msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(this::token_launch)
        .store_coins(0)
        .store_only_body_ref(msg_body.end_cell())
        .end_cell();
    return msg;
}

cell build_wl_callback(int query_id, int should_burn?) inline {
    ;; Build MessageRelaxed, see TL-B layout in stdlib.fc#L733
    cell msg_body = begin_cell()
        .store_op(op::tl::wl_callback)
        .store_query_id(query_id)
        .store_bool(should_burn?)
        .store_slice(this::owner)
        .end_cell();
    cell msg = begin_cell()
    ;; There is no sense to handle bouncing of this message as we won't be able to fix this issue directly
        .store_msg_flags_and_address_none(NON_BOUNCEABLE)
        .store_slice(this::token_launch)
        .store_coins(0)
        .store_only_body_ref(msg_body)
        .end_cell();
    return msg;
}

;;; We repeat `save_data` here as we want to exlude completely an opportuninty of infinite refund attack through
;;; lack of attached gas or sth. It is just safer, albeit not as concise.
() handle_balance_update(int query_id, int mode, int ton_balance_update, int jetton_balance_update) impure inline {
    if (mode == BALANCE_UPD_DEPOSIT_WL) {
        throw_if(error::unreachable, jetton_balance_update > 0);

        cell wl_callback = build_wl_callback(query_id, ~ this::has_whitelist?);
        ifnot (this::has_whitelist?) {
            this::has_whitelist? = TRUE;
        }
        this::wl_ton_balance += ton_balance_update;
        {-
           Making sure that we leave our storage fee TONs on contract, it will be returned after complete withdrawal
           There is no sense in calculation MYSTORAGEDUE as we attached fixed fee for this operation,
           and if we overlimit user_vault_min_storage_fee - we'll get DOS XD
        -}
        send_raw_message(wl_callback, get_withdraw_message_mode());
    }
    if (mode == BALANCE_UPD_DEPOSIT_PUB) {
        this::public_ton_balance += ton_balance_update;
        this::jetton_balance += jetton_balance_update;

        ;; As we don't send any callbacks - return excesses directly
        cell msg = begin_cell()
            .store_msg_flags_and_address_none(NON_BOUNCEABLE)
            .store_slice(this::owner)
            .store_coins(0)
            .store_prefix_only_body()
            .store_op(op::excesses)
            .store_query_id(query_id)
            .end_cell();
        send_raw_message(msg, get_withdraw_message_mode());
    }
    if (mode == BALANCE_UPD_WITHDRAWAL_WL) {
        int wl_tons = this::wl_ton_balance;
        this::wl_ton_balance = 0;

        cell msg = build_withdraw_confirmation_message(TRUE, query_id, wl_tons, 0, 0, mode);
        send_raw_message(msg, get_withdraw_message_mode());
    }
    if (mode == BALANCE_UPD_WITHDRAWAL_PUB) {
        throw_unless(error::balance_lack, this::public_ton_balance > 0);
        int pub_tons = this::public_ton_balance;
        int jettons_to_restore = this::jetton_balance;

        this::public_ton_balance = 0;
        this::jetton_balance = 0;

        cell msg = build_withdraw_confirmation_message(TRUE, query_id, 0, pub_tons, jettons_to_restore, mode);
        send_raw_message(msg, get_withdraw_message_mode());
    }
    if (mode == BALANCE_UPD_WITHDRAWAL_ALL) {
        throw_if(error::balance_lack, this::wl_ton_balance + this::public_ton_balance == 0);
        int wl_tons = this::wl_ton_balance;
        int pub_tons = this::public_ton_balance;
        int jettons_to_restore = this::jetton_balance;

        this::wl_ton_balance = 0;
        this::public_ton_balance = 0;
        this::jetton_balance = 0;

        cell msg = build_withdraw_confirmation_message(TRUE, query_id, wl_tons, pub_tons, jettons_to_restore, mode);
        send_raw_message(msg, get_withdraw_message_mode());
    }
}

() handle_claim(int query_id) {
    ;; unreacheble as it should not exist then
    throw_if(error::unreachable, this::wl_ton_balance + this::jetton_balance == 0);
    int wl_tons = this::wl_ton_balance;
    int pub_tons = this::public_ton_balance;
    int jettons_to_claim = this::jetton_balance;

    this::wl_ton_balance = 0;
    this::public_ton_balance = 0;
    this::jetton_balance = 0;

    cell msg = build_withdraw_confirmation_message(FALSE, query_id, wl_tons, pub_tons, jettons_to_claim, 6);
    send_raw_message(msg, get_withdraw_message_mode());
}