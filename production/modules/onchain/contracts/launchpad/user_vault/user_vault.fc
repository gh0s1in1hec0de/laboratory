#include "../../workchain.fc";
#include "../../stdlib.fc";
#include "../op-codes.fc";
#include "../utils.fc";

#include "balance_handler.fc";
#include "uv_context.fc";

() load_data() inline_ref {
    slice ds = get_data().begin_parse();
    this::owner = ds~load_msg_addr();
    this::token_launch = ds~load_msg_addr();
    this::has_whitelist? = ds~load_bool();
    this::wl_ton_balance = ds~load_coins();
    this::public_ton_balance = ds~load_coins();
    this::jetton_balance = ds~load_coins();
    ds.end_parse();
}

() save_data() impure inline_ref {
    set_data(
        begin_cell()
            .store_slice(this::owner)
            .store_slice(this::token_launch)
            .store_bool(this::has_whitelist?)
            .store_coins(this::wl_ton_balance)
            .store_coins(this::public_ton_balance)
            .store_coins(this::jetton_balance)
            .end_cell()
    );
}

() recv_internal(int contract_balance, int attached_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?() | in_msg_body.slice_bits() < 32) {
        ;; Logic for simple transfers
        return ();
    }
    (int msg_flags, slice sender_address, int attached_value, int fwd_fee_from_in_msg) = extract_full_msg_data(in_msg_full);
    (int op, int query_id) = in_msg_body~load_op_and_query_id();

    load_data(); ;; Now we have our contract data available in globals

    if (msg_flags & 1) {
        ;; Is bounced
        ifnot (op == op::tl::refund_confirmation) {
            return ();
        }
        this::wl_ton_balance += in_msg_body~load_coins();
        this::public_ton_balance += in_msg_body~load_coins();
        this::jetton_balance += in_msg_body~load_coins();
        save_data();
        return ();
    }

    throw_unless(error::unauthorized_access, equal_slices_bits(sender_address, this::token_launch));
    if (op == op::uv::balance_update) {
        handle_balance_update(
            query_id,
            in_msg_body~load_uint(4),
            in_msg_body~load_coins(),
            in_msg_body~load_coins()
        );
        save_data();
        return ();
    }
    if (op == op::uv::claim) {
        handle_claim(query_id);
        ;; Should I leave it or it will be destroyed with 100% guarantee?
        save_data();
        return ();
    }
    throw(error::wrong_op);
}

(slice, int, int, int) get_vault_data() method_id {
    load_data();
    return (this::owner, this::wl_ton_balance, this::public_ton_balance, this::jetton_balance);
}