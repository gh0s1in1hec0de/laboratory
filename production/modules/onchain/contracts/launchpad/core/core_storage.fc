#include "../../stdlib.fc";
#include "core_context.fc";

;; TODO FUCKING FIGURE OUT
() load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
    this::chief = ds~load_msg_addr();
    this::util_jetton_master_address = ds~load_msg_addr();
    this::util_jetton_wallet_address = ds~load_msg_addr();
    this::util_jet_cur_balance = ds~load_coins();
    this::not_funded_launches = ds~load_dict();
    this::not_funded_launches_amount = ds~load_uint(8);

    cell launch_config = ds~load_ref();
    slice launch_config_slice = launch_config.begin_parse();
    launch_conf::min_ton_for_sale_success = launch_config_slice~load_coins();
    launch_conf::ton_limit_for_wl_round = launch_config_slice~load_coins();
    launch_conf::util_jet_reward_amount = launch_config_slice~load_coins();
    launch_conf::util_jet_wl_pass_amount = launch_config_slice~load_coins();
    launch_conf::util_jet_burn_per_wl_pass_amount = launch_config_slice~load_coins();

    launch_conf::jet_wl_limit_pct = launch_config_slice~load_uint(16);
    launch_conf::jet_pub_limit_pct = launch_config_slice~load_uint(16);
    launch_conf::jet_dex_share_pct = launch_config_slice~load_uint(16);

    launch_conf::creator_round_duration_ms = launch_config_slice~load_int(32);
    launch_conf::wl_round_duration_ms = launch_config_slice~load_int(32);
    launch_conf::pub_round_duration_ms = launch_config_slice~load_int(32);
    launch_conf::claim_duration_ms = launch_config_slice~load_int(32);
    launch_config_slice.end_parse();

    cell contracts = ds~load_ref();
    slice contarcts_slice = contracts.begin_parse();
    code::jetton_launch = contarcts_slice~load_ref();
    code::user_vault = contarcts_slice~load_ref();

    code::derived_jetton_master = contarcts_slice~load_ref();
    code::jetton_wallet = contarcts_slice~load_ref();
    contarcts_slice.end_parse();

    ds.end_parse();
}

() save_data() impure inline_ref {
    cell contracts = begin_cell()
        .store_ref(code::jetton_launch)
        .store_ref(code::user_vault)
        .store_ref(code::derived_jetton_master)
        .store_ref(code::jetton_wallet)
        .end_cell();
    cell launch_config = begin_cell()
        .store_coins(launch_conf::min_ton_for_sale_success)
        .store_coins(launch_conf::ton_limit_for_wl_round)
        .store_coins(launch_conf::util_jet_reward_amount)
        .store_coins(launch_conf::util_jet_wl_pass_amount)
        .store_coins(launch_conf::util_jet_burn_per_wl_pass_amount)
        .store_uint(launch_conf::jet_wl_limit_pct, 16)
        .store_uint(launch_conf::jet_pub_limit_pct, 16)
        .store_uint(launch_conf::jet_dex_share_pct, 16)
        .store_int(launch_conf::creator_round_duration_ms, 32)
        .store_int(launch_conf::wl_round_duration_ms, 32)
        .store_int(launch_conf::pub_round_duration_ms, 32)
        .store_int(launch_conf::claim_duration_ms, 32)
        .end_cell();
    cell data = begin_cell()
        .store_slice(this::chief)
        .store_slice(this::util_jetton_master_address)
        .store_slice(this::util_jetton_wallet_address)
        .store_coins(this::util_jet_cur_balance)
        .store_dict(this::not_funded_launches)
        .store_uint(this::not_funded_launches_amount, 8)
        .store_ref(launch_config)
        .store_ref(contracts)
        .end_cell();
    set_data(data);
}