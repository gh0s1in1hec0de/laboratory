#include "../workchain.fc";
#include "op_codes.fc";
#include "../stdlib.fc";

const ONE_TON = 1000000000;

const MIN_STORAGE_DURATION = 1 * 365 * 24 * 3600; ;; 1 year

;;# Precompiled constants
;;
;;All of the contents are result of contract emulation tests
;;

;;## Minimal fees
;;
;;- Transfer [/sandbox_tests/Pool.test.ts#L935](L935) `0.028627415` TON
;;- Burn [/sandbox_tests/Pool.test.ts#L1185](L1185) `0.016492002` TON


;;## Storage
;;
;;Get calculated in a separate test file [/sandbox_tests/StateInit.spec.ts](StateInit.spec.ts)

;;- `JETTON_WALLET_BITS` [/sandbox_tests/StateInit.spec.ts#L92](L92)
const JETTON_WALLET_BITS  = 10500;

;;- `JETTON_WALLET_CELLS`: [/sandbox_tests/StateInit.spec.ts#L92](L92)
const JETTON_WALLET_CELLS = 21;

;; difference in JETTON_WALLET_BITS/JETTON_WALLET_INITSTATE_BITS is difference in
;; StateInit and AccountStorage (https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb)
;; we count bits as if balances are max possible
;;- `JETTON_WALLET_INITSTATE_BITS` [/sandbox_tests/StateInit.spec.ts#L95](L95)
const JETTON_WALLET_INITSTATE_BITS  = 10500;
;;- `JETTON_WALLET_INITSTATE_CELLS` [/sandbox_tests/StateInit.spec.ts#L95](L95)
const JETTON_WALLET_INITSTATE_CELLS = 21;

;; wallet.fc#L163 - maunal bits counting
const BURN_NOTIFICATION_BITS = 754; ;; body = 32+64+124+(3+8+256)+(3+8+256)
const BURN_NOTIFICATION_CELLS = 1; ;; body always in ref

;;## Gas
;;
;;Gas constants are calculated in the main test suite.
;;First the related transaction is found, and then it's
;;resulting gas consumption is printed to the console.

;;- `SEND_TRANSFER_GAS_CONSUMPTION` [/sandbox_tests/Pool.test.ts#L853](L853)
const SEND_TRANSFER_GAS_CONSUMPTION    = 15000;

;;- `RECEIVE_TRANSFER_GAS_CONSUMPTION` [/sandbox_tests/Pool.test.ts#L862](L862)
const RECEIVE_TRANSFER_GAS_CONSUMPTION = 10000;

;;- `SEND_BURN_GAS_CONSUMPTION` [/sandbox_tests/Pool.test.ts#L1154](L1154)
const SEND_BURN_GAS_CONSUMPTION    = 7300;

;;- `RECEIVE_BURN_GAS_CONSUMPTION` [/sandbox_tests/Pool.test.ts#L1155](L1155)
const RECEIVE_BURN_GAS_CONSUMPTION = 5500;

;; Xmas mechanics
const INCREASE_SUPPLY_GAS_CONSUMTION = 6000;
const INCREASE_SUPPLY_MESSAGE_BITS   = 488;
const INCREASE_SUPPLY_MESSAGE_CELLS   = 1;


int calculate_jetton_wallet_min_storage_fee() inline {
    return get_storage_fee(MY_WORKCHAIN, MIN_STORAGE_DURATION, JETTON_WALLET_BITS, JETTON_WALLET_CELLS);
}

int forward_init_state_overhead() inline {
    return get_simple_forward_fee(MY_WORKCHAIN, JETTON_WALLET_INITSTATE_BITS, JETTON_WALLET_INITSTATE_CELLS);
}

() check_amount_is_enough_to_transfer(int msg_value, int forward_ton_amount, int fwd_fee) impure inline {
    int fwd_count = forward_ton_amount ? 2 : 1; ;; second sending (forward) will be cheaper that first

    throw_unless(error::not_enough_gas, msg_value >
    forward_ton_amount +
    ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
    ;; but last one is optional (it is ok if it fails)
    fwd_count * fwd_fee +
    forward_init_state_overhead() + ;; additional fwd fees related to initstate in iternal_transfer
    get_compute_fee(MY_WORKCHAIN, SEND_TRANSFER_GAS_CONSUMPTION) +

    get_forward_fee(MY_WORKCHAIN, INCREASE_SUPPLY_MESSAGE_BITS, INCREASE_SUPPLY_MESSAGE_CELLS) +
    get_compute_fee(MY_WORKCHAIN, INCREASE_SUPPLY_GAS_CONSUMTION) +

    get_compute_fee(MY_WORKCHAIN, RECEIVE_TRANSFER_GAS_CONSUMPTION) +
    calculate_jetton_wallet_min_storage_fee());
}

() check_amount_is_enough_to_burn(int msg_value) impure inline {
    throw_unless(
        error::not_enough_gas,
        msg_value >
        get_forward_fee(MY_WORKCHAIN, BURN_NOTIFICATION_BITS, BURN_NOTIFICATION_CELLS) +
        get_compute_fee(MY_WORKCHAIN, SEND_BURN_GAS_CONSUMPTION) +
        get_compute_fee(MY_WORKCHAIN, RECEIVE_BURN_GAS_CONSUMPTION)
    );
}
