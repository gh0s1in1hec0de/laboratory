#include "../workchain.fc";
#include "../stdlib.fc";
#include "op-codes.fc";

const ONE_TON = 1000000000;
const ONE_DAY = 24 * 3600;
const ONE_MONTH = 30 * ONE_DAY;
const TWO_MONTHS = 60 * ONE_DAY;

{-
  Here will be just some of my thoughts, decisions explanations and notes.
  As gas coalculation and contract are already bloated as fuck I'll try to compress and simplify some of
    gas calculation parts without lost of quality and predictability (imo). The first practice, that is different from
    stablecoin-contract is unification of contract storage and stateinit consuption. I don't split them, as
    it is possible just measure the case of most loaded storage structure and set it everywhere. Fees difference in this case is insignificant.

-}

;; Precompiled constants
;; All of the contents are result of contract emulation tests

;; Minimal fees
;; https://github.com/ton-blockchain/stablecoin-contract/blob/62f661d79012a259c0110dce611dafc31359be78/contracts/gas.fc#L14 (Actuallly 28627415, but rounded)
const JETTON_MIN_TRANSFER_FEE = 50000000;
;; https://docs.ton.org/develop/smart-contracts/fees#fees-for-sending-ton
const SIMPLE_TRANSFER_FEE = 6000000;

const CORE_STATE_BITS  = 55000;
const CORE_STATE_CELLS = 135;
;; Use `loadAtMax` to measure
const TOKEN_LAUNCH_STATE_BITS  = 50000;
const TOKEN_LAUNCH_STATE_CELLS = 120;

const USER_VAULT_STATE_BITS  = 6000;
const USER_VAULT_STATE_CELLS = 20;

const JETTON_MASTER_STATE_BITS = 16703;
const JETTON_MASTER_STATE_CELLS = 35;

;; refund_confirmation & jetton_claim_confirmation in main.tlb, still unified but took the upper bound (with `mode`)
const WITHDRAW_CONFIRMATION_MSG_BITS = 739;
const WITHDRAW_CONFIRMATION_MSG_CELLS = 1; ;; ref body
const BALANCE_UPDATE_BITS = 348;
const BALANCE_UPDATE_CELLS = 1; ;; body always in ref

;; Gas
;; Gas constants are calculated in the main test suite.
;; First the related transaction is found, and then it's
;; resulting gas consumption is printed to the console.

;; TODO Validate all the fees change due to global contract operating change

int calculate_core_min_storage_fee(int duration) inline {
    return get_storage_fee(MY_WORKCHAIN, duration, CORE_STATE_BITS, CORE_STATE_CELLS);
}

int calculate_user_vault_min_storage_fee(int duration) inline {
    return get_storage_fee(MY_WORKCHAIN, duration, USER_VAULT_STATE_BITS, USER_VAULT_STATE_CELLS);
}

int calculate_token_launch_min_storage_fee(int duration) inline {
    return get_storage_fee(MY_WORKCHAIN, duration, TOKEN_LAUNCH_STATE_BITS, TOKEN_LAUNCH_STATE_CELLS);
}

int calculate_jetton_master_min_storage_fee(int duration) inline {
    return get_storage_fee(MY_WORKCHAIN, duration, JETTON_MASTER_STATE_BITS, JETTON_MASTER_STATE_CELLS);
}

int forward_user_vault_init_state_overhead() inline {
    return get_simple_forward_fee(MY_WORKCHAIN, USER_VAULT_STATE_BITS, USER_VAULT_STATE_CELLS);
}

int forward_jetton_master_init_state_overhead() inline {
    return get_simple_forward_fee(MY_WORKCHAIN, JETTON_MASTER_STATE_BITS, JETTON_MASTER_STATE_CELLS);
}

int forward_token_launch_init_state_overhead() inline {
    return get_simple_forward_fee(MY_WORKCHAIN, TOKEN_LAUNCH_STATE_BITS, TOKEN_LAUNCH_STATE_CELLS);
}

const BALANCE_UPDATE_MSG_BITS = 348;
const BALANCE_UPDATE_MSG_CELLS = 1;
;; Wl mode as the most consumpting were taken
const RECEIVE_BALANCE_UPDATE_CONSUMPTION = 10000;
;;; Accounts unified balance-update message forwarding, user vault stateinit & storage fee overhead
;;; and receiving balance update gas consumption
int get_balance_update_gas_cost() inline_ref {
    return
    get_forward_fee(MY_WORKCHAIN, BALANCE_UPDATE_MSG_BITS, BALANCE_UPDATE_MSG_CELLS)
    + forward_user_vault_init_state_overhead()
    + get_compute_fee(MY_WORKCHAIN, RECEIVE_BALANCE_UPDATE_CONSUMPTION)
    + calculate_user_vault_min_storage_fee(TWO_MONTHS);
}

;;; Returns purified value and operational needs
(int, int) validate_value(int total, int fee) impure inline_ref {
    throw_if(error::not_enough_gas, fee > total);
    int extra = total - fee;
    int purified = muldiv(extra, 99, 100);
    throw_unless(error::balance_lack, purified > 0);
    return (purified, extra - purified);
}

;; As we don't have any external calls, we accounting only code execution fees
const CREATOR_BUYOUT_GAS_CONSUMPTION = 13493;
(int, int) check_amount_is_enough_for_creator_buyout(int msg_value) impure inline {
    return validate_value(msg_value, get_compute_fee(MY_WORKCHAIN, CREATOR_BUYOUT_GAS_CONSUMPTION));
}

const CREATOR_REFUND_GAS_CONSUMPTION = 15117;
(int, int) check_amount_is_enough_for_creator_refund(int msg_value) impure inline {
    return validate_value(msg_value, get_compute_fee(MY_WORKCHAIN, CREATOR_REFUND_GAS_CONSUMPTION));
}

;; === Whitelist Purchase ===
const WL_PURCHASE_REQUEST_GAS_CONSUMPTION = 26506;
const WL_CALLBACK_MSG_BITS = 364; ;;
const WL_CALLBACK_MSG_CELLS = 1; ;; body always in ref
const WL_CALLBACK_GAS_CONSUMPTION = 13558;
int get_wl_purchase_gas_consumption() inline_ref {
    return get_compute_fee(MY_WORKCHAIN, WL_PURCHASE_REQUEST_GAS_CONSUMPTION)
    + JETTON_MIN_TRANSFER_FEE ;; Return main chunk of tokens immidiatly
    + get_balance_update_gas_cost()
    + get_forward_fee(MY_WORKCHAIN, WL_CALLBACK_MSG_BITS, WL_CALLBACK_MSG_CELLS)
    + get_compute_fee(MY_WORKCHAIN, WL_CALLBACK_GAS_CONSUMPTION)
    + JETTON_MIN_TRANSFER_FEE; ;; Refund / burn
}

(int, int) check_amount_is_enough_for_wl_purchase(int msg_value) impure inline {
    (int, int)(purified, opn) = (0, 0);

    try {
        (purified, opn) = validate_value(
            msg_value,
            get_wl_purchase_gas_consumption()
        );
    } catch (_, _) {
        ;; Do not actually need it
    }
    return (purified, opn);
}

;; === Public Purchase ===
const PUB_PURCHASE_GAS_CONSUMPTION = 21992;
(int, int) check_amount_is_enough_for_public_purchase(int msg_value) impure inline {
    return validate_value(
        msg_value,
        get_compute_fee(MY_WORKCHAIN, PUB_PURCHASE_GAS_CONSUMPTION) + get_balance_update_gas_cost()
    );
}

;; === Refund ===
const REFUND_REQUEST_GAS_CONSUMPTION = 14356;
const REFUND_CONFIRMATION_GAS_CONSUMPTION = 19305;
() check_amount_is_enough_for_refund(int msg_value) impure inline {
    int required_gas =
    get_compute_fee(MY_WORKCHAIN, REFUND_REQUEST_GAS_CONSUMPTION)
    + get_balance_update_gas_cost()
    + get_forward_fee(MY_WORKCHAIN, WITHDRAW_CONFIRMATION_MSG_BITS, WITHDRAW_CONFIRMATION_MSG_CELLS)
    + get_compute_fee(MY_WORKCHAIN, REFUND_CONFIRMATION_GAS_CONSUMPTION)
    + SIMPLE_TRANSFER_FEE;
    throw_if(error::not_enough_gas, msg_value < required_gas);
}

;; === Jetton Deploy ===
const DEPLOY_JETTON_REQUEST_GAS_CONSUMPTION = 16000;
const MINT_MSG_BITS = 1366;
const MINT_MSG_CELLS = 3;
const MINT_REQUEST_GAS_CONSUMPTION = 8000;
const JETTONS_ENROLLMENT_ACCEPTANCE_GAS_CONSUMPTION = 20000;
const JETTON_TRANSFER_TO_CHIEF_FORWARD_PAYLOAD_BITS = 248; ;; See token_launch/jetton_operating.fc
const JETTON_TRANSFER_TO_CHIEF_FORWARD_PAYLOAD_CELLS = 1;
const JETTON_TRANSFER_TO_CHIEF_ENROLLMENT_GAS_CONSUMPTION = 500;
const REVOKE_ADMIN_MSG_BITS = 96;
const REVOKE_ADMIN_MSG_CELLS = 1;
const REVOKE_ADMIN_GAS_CONSUMPTION = 2814;

int get_jetton_deployment_request_gas_cost() inline_ref {
    return
    get_forward_fee(MY_WORKCHAIN, MINT_MSG_BITS, MINT_MSG_CELLS)
    + forward_jetton_master_init_state_overhead()
    + calculate_jetton_master_min_storage_fee(7 * ONE_DAY)
    + get_compute_fee(MY_WORKCHAIN, MINT_REQUEST_GAS_CONSUMPTION)
    {- In fact, this is payment for only one transfer, but, as transfer fees calculated dynamically on top of fwd_fess
    of previous message (which is much lager), its validation asks for a bigger amount.
    All the remainings (as it's guaranteed that actual operation is much cheaper) will be returned as excesses. -}
    + (JETTON_MIN_TRANSFER_FEE * 2)
    + get_compute_fee(MY_WORKCHAIN, JETTONS_ENROLLMENT_ACCEPTANCE_GAS_CONSUMPTION);
}

int get_jetton_deployment_callback_gas_cost() inline_ref {
    return
    get_forward_fee(MY_WORKCHAIN, REVOKE_ADMIN_MSG_BITS, REVOKE_ADMIN_MSG_CELLS)
    + get_compute_fee(MY_WORKCHAIN, REVOKE_ADMIN_GAS_CONSUMPTION)
    + JETTON_MIN_TRANSFER_FEE
    + get_forward_fee(MY_WORKCHAIN, JETTON_TRANSFER_TO_CHIEF_FORWARD_PAYLOAD_BITS, JETTON_TRANSFER_TO_CHIEF_FORWARD_PAYLOAD_CELLS)
    + get_compute_fee(MY_WORKCHAIN, JETTON_TRANSFER_TO_CHIEF_ENROLLMENT_GAS_CONSUMPTION);
}

int get_jetton_deployment_total_gas_cost() inline_ref {
    return get_compute_fee(MY_WORKCHAIN, DEPLOY_JETTON_REQUEST_GAS_CONSUMPTION)
    + get_jetton_deployment_request_gas_cost()
    + get_jetton_deployment_callback_gas_cost();
}


;; === Jetton Claim ===
;; Don't need stateinit as if vault doesn't exist, then there is nothing to claim
const RECEIVE_CLAIM_CONSUMPTION = 7294;
const CLAIM_MSG_BITS = 96;
const CLAIM_MSG_CELLS = 1; ;; not in a ref but im paranoid guy
int get_claim_gas_cost() inline {
    return get_forward_fee(MY_WORKCHAIN, CLAIM_MSG_BITS, CLAIM_MSG_CELLS)
    + get_compute_fee(MY_WORKCHAIN, RECEIVE_CLAIM_CONSUMPTION)
    + calculate_user_vault_min_storage_fee(TWO_MONTHS);
}
const CLAIM_REQUEST_GAS_CONSUMPTION = 15000;
const CLAIM_CONFIRMATION_GAS_CONSUMPTION = 20000;
int check_amount_is_enough_for_jetton_claim(int msg_value) impure inline {
    int required_gas =
    get_compute_fee(MY_WORKCHAIN, CLAIM_REQUEST_GAS_CONSUMPTION)
    + get_claim_gas_cost()
    + get_forward_fee(MY_WORKCHAIN, WITHDRAW_CONFIRMATION_MSG_BITS, WITHDRAW_CONFIRMATION_MSG_CELLS)
    + get_compute_fee(MY_WORKCHAIN, CLAIM_CONFIRMATION_GAS_CONSUMPTION)
    + JETTON_MIN_TRANSFER_FEE;
    throw_unless(error::not_enough_gas, msg_value > required_gas);
    return msg_value - required_gas;
}

;; Measured in "new launch creation through core"
const CREATE_LAUNCH_GAS_CONSUMPTION = 32000;
;; Manual bits counting from core/operations.fc#L~120
const INIT_MSG_BITS = 897; ;; 32 + 64 + 3 x (3+8+256)
const INIT_MSG_CELLS = 2; ;; body in ref + stateinit in ref (I don't know exactly if I should account it here, so be it)
const INITIALIZATION_GAS_CONSUMPTION = 15320;
int get_amount_for_token_launch_deploy() inline_ref {
    return get_compute_fee(MY_WORKCHAIN, CREATE_LAUNCH_GAS_CONSUMPTION)
    + get_forward_fee(MY_WORKCHAIN, INIT_MSG_BITS, INIT_MSG_CELLS)
    + forward_token_launch_init_state_overhead()
    + get_compute_fee(MY_WORKCHAIN, INITIALIZATION_GAS_CONSUMPTION)
    + get_jetton_deployment_total_gas_cost()
    + calculate_token_launch_min_storage_fee(TWO_MONTHS);
}