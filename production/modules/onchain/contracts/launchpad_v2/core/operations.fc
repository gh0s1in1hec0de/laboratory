#include "../../stdlib.fc";
#include "../op-codes.fc";
#include "../utils.fc";
#include "../gas.fc";

#include "core_context.fc";

;; We use TEP-74 Metadata standard
;; We determine start time manually to be able to calculate address of lunch off-chain before its actual deploy
() create_launch(int query_id, slice sender_address, int total_supply, int platform_share_pct, cell metadata_cell, int start_time) impure inline {
    int wl_jet_limit = muldiv(launch_conf::fut_jet_wl_limit_pct, total_supply, PERCENTAGE_DENOMINATOR);
    int pub_jet_limit = muldiv(launch_conf::fut_jet_pub_limit_pct, total_supply, PERCENTAGE_DENOMINATOR);
    int dex_jet_share = muldiv(launch_conf::fut_jet_dex_share_pct, total_supply, PERCENTAGE_DENOMINATOR);
    int platform_share = muldiv(platform_share_pct, total_supply, PERCENTAGE_DENOMINATOR);
    int creator_buyback_jet_limit = total_supply - (wl_jet_limit + pub_jet_limit + dex_jet_share + platform_share);

    {- Creator price dilemma
       Here we store not price of one token, but price of one ton unit in terms of tokens
       To minimize inacurracy and chance of associated risks, we'll mult it by max value of ton_limit_for_wl_round
       We don't even need constraint for wl_jet_limit, as we won't get 0 even in case of wl_jet_limit = 1 ;)

       TLDR: amount of "nano"jettons per one nanoton (multiplied by custom precision)
    -}
    int creator_jet_price_reversed = muldiv(wl_jet_limit * 2, MAX_WL_ROUND_TON_LIMIT, launch_conf::ton_limit_for_wl_round);

    cell general_state = begin_cell()
        .store_int(start_time, 32)
        .store_coins(total_supply)
        .store_coins(0)
        .store_coins(0)
        .end_cell();
    cell creator_round_state = begin_cell()
        .store_coins(creator_buyback_jet_limit)
        .store_coins(0)
        .store_coins(creator_jet_price_reversed)
        .store_int(start_time + launch_conf::creator_round_duration_sec, 32)
        .end_cell();
    cell wl_round_state = begin_cell()
        .store_coins(wl_jet_limit)
        .store_coins(launch_conf::ton_limit_for_wl_round)
        .store_coins(launch_conf::util_jet_wl_pass_amount)
        .store_coins(launch_conf::util_jet_wl_pass_one_time_price)
        .store_coins(0)
        .store_int(start_time
        + launch_conf::creator_round_duration_sec
        + launch_conf::wl_round_duration_sec, 32)
        .end_cell();
    cell public_round_state = begin_cell()
        .store_coins(pub_jet_limit)
        .store_coins(0)
        .store_coins(wl_jet_limit)
        .store_coins(0)
        .store_int(
            start_time
            + launch_conf::creator_round_duration_sec
            + launch_conf::wl_round_duration_sec
            + launch_conf::pub_round_duration_sec,
            32
        )
        .end_cell();
    cell sale_state = begin_cell()
        .store_ref(general_state)
        .store_ref(creator_round_state)
        .store_ref(wl_round_state)
        .store_ref(public_round_state)
        .end_cell();
    cell sale_config = begin_cell()
        .store_coins(total_supply)
        .store_coins(launch_conf::min_ton_for_sale_success)
        .store_coins(dex_jet_share)
        .store_coins(platform_share)
        .end_cell();
    cell tools = begin_cell()
        .store_address_none()
        .store_address_none()
        .store_address_none()
        .store_ref(metadata_cell)
        .store_ref(code::jetton_master)
        .store_ref(code::jetton_wallet)
        .store_ref(code::user_vault)
        .end_cell();
    cell data = begin_cell()
        .store_int(0, 1)
        .store_coins(0)
        .store_slice(this::chief)
        .store_slice(sender_address)
        .store_ref(sale_config)
        .store_ref(sale_state)
        .store_ref(tools)
        .end_cell();
    cell token_launch_stateinit = calculate_contract_state_init(code::token_launch, data);
    slice token_launch_address = calculate_contract_address(token_launch_stateinit);
    (cell _fut_jet_master_stateinit, slice fut_jet_master_address) = calculate_fut_jet_master_data(
        code::jetton_master,
        0,
        token_launch_address,
        code::jetton_wallet,
        metadata_cell
    );

    slice token_launch_fut_jet_wallet_address = calculate_user_jetton_wallet_address(
        token_launch_address, fut_jet_master_address, code::jetton_wallet
    );
    slice token_launch_util_jet_wallet_address = calculate_user_jetton_wallet_address(
        token_launch_address, launch_conf::util_jet_master_address, code::jetton_wallet
    );

    int msg_value = get_amount_for_token_launch_deploy() - get_compute_fee(MY_WORKCHAIN, CREATE_LAUNCH_GAS_CONSUMPTION);

    cell msg_body = begin_cell()
        .store_op(op::tl::init)
        .store_query_id(query_id)
        .store_slice(token_launch_fut_jet_wallet_address)
        .store_slice(fut_jet_master_address)
        .store_slice(token_launch_util_jet_wallet_address)
        .end_cell();
    cell msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(token_launch_address)
        .store_coins(msg_value)
        .store_stateinit_ref_and_body_ref(token_launch_stateinit, msg_body)
        .end_cell();

    send_raw_message(
        simple_transfer(this::chief, launch_conf::penny, "meow^^"),
        SEND_MODE_REGULAR | SEND_MODE_BOUNCE_ON_ACTION_FAIL
    );
    send_raw_message(msg, SEND_MODE_REGULAR | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}
